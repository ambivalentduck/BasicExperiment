#include <QDesktopWidget>
#include <QApplication>
#include <QString>
#include <iostream>
#include <string.h>
#include "displaywidget.h"
#include "deepthought.h"
#include "devicesampler.h"
#include <stdlib.h>
#include <QFile>
#include <QInputDialog>
#include <QMessageBox>
#include <QRegExp>
#include <QStringList>
#include <fstream>

#define PATH "/research/data/v1/"

DisplayWidget * widget;
DeviceSampler * sampler;
DeepThought * thinker;

int main(int argc, char **argv)
{
   timespec first;
   clock_gettime(CLOCK_REALTIME,&first);
   std::string device;
   QString output, input, prior;
   QFile qfile;
   QMessageBox::StandardButton reply;
   int enhance, task, out;
   bool ok=false;
   
   QApplication a(argc, argv);
      
   if (argc==1) while(!ok)
   {
	   out=QInputDialog::getInt(0, "Subject # Number Selection","Subject number from consent form:",1,1,48,1, &ok);
	   if((!ok)||(out<0)) return 0;
	   output.setNum(out);
	   if(out!=1)
	   {
		   //Check that prior subject is used.
		   prior.setNum(out-1);
		   qfile.setFileName(QString(PATH+prior+"Cont.dat"));
		   if(!qfile.exists())
		   {
			   reply = QMessageBox::question(0, "Danger Will Robinson! Danger!", "Prior subject number unused!?!? Procede anyways?", QMessageBox::Yes | QMessageBox::No);
			   if (reply==QMessageBox::No) {ok=false; continue;}
		   }
	   }
	   //Check that present value is unused.
	   qfile.setFileName(PATH+output+"Cont.dat");
	   if(qfile.exists())
	   {
		   
		   reply = QMessageBox::question(0, "Danger Will Robinson! Danger!", "This subject number is already used. Overwrite the old data?", QMessageBox::Yes | QMessageBox::No);
		   if (reply==QMessageBox::No) {ok=false; continue;}
	   }
	   output=PATH+output;
	   std::ifstream ifs("/research/EAvs2xFF/subs.dat");
	   int count=0;
	   std::string line;
	   while(count<out)
	   {
		   std::getline(ifs,line);
		   count++;
	   }
	   QRegExp rx("(\\d{1,2}) (\\d{3}) (\\d{3})");
	   ifs.close();
	   rx.indexIn(line.c_str());
	   QStringList qsl=rx.capturedTexts();
	   QStringList::const_iterator  base=qsl.begin();
	   ++base;
	   ++base;
	   enhance=(*base).toInt();
	   ++base;
	   task=(*base).toInt();
	   std::cout << enhance << " " << task << std::endl;
   }
   else
   {
	   if (argc > 1) output=QString(argv[1]);
	   if (argc > 3) {enhance=atoi(argv[2]); task=atoi(argv[3]);}
	   else {enhance=-1; task=-1;}
   }
   //std::cout << "\a" << std::endl;  //System beep to help synchronize any video recording.
   //QSound::play("mysounds/bells.wav"); //Play something obnoxious and loud for synchronization instead?
   input="";
      
   device=""; //Deal with this later
   
   QDesktopWidget qdw;
   std::cout << qdw.numScreens() <<" screen" << ((qdw.numScreens()-1)?"s":"\0") << " available. " << (qdw.isVirtualDesktop()?"Virutal.":"Not Virtual.")<< std::endl;
   QRect qr=qdw.screenGeometry();
   //qr.setWidth(600);
   std::cout << "X:" << qr.x() << " Y:" << qr.y() << " W:" << qr.width() << " H:" << qr.height() << std::endl;
   sampler=new DeviceSampler(first,device,qr.width(),qr.height());
   sampler->start();
   thinker=new DeepThought(first,sampler,qr.width(),qr.height(),output, input,enhance,task);
   widget=new DisplayWidget(thinker, qr, 0); //qdw.screen(qdw.primaryScreen()));
   QObject::connect(widget, SIGNAL(die()), &a, SLOT(quit()));
   widget->show();
   sampler->begin();
   thinker->start();
   return a.exec();
}
